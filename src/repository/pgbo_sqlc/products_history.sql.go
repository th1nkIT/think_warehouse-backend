// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products_history.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteProductsHistory = `-- name: DeleteProductsHistory :exec

UPDATE products_history
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE
    guid = $2
  AND deleted_at IS NULL
`

type DeleteProductsHistoryParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	Guid      string         `json:"guid"`
}

// Belum ada update
// -- name: UpdateWarehouse :one
// UPDATE products_history
// SET name = @new_name,
//
//	product_picture_url = @new_product_picture_url,
//	description = @new_description,
//	updated_by = @new_created_by,
//	updated_at = (now() at time zone 'UTC')::TIMESTAMP
//
// WHERE guid = @guid
// RETURNING product.*;
func (q *Queries) DeleteProductsHistory(ctx context.Context, arg DeleteProductsHistoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteProductsHistory, arg.DeletedBy, arg.Guid)
	return err
}

const findWithGUIDProductsHistory = `-- name: FindWithGUIDProductsHistory :many
SELECT id, guid, product_guid, quantity, warehouse_guid, tgl_masuk, pegawai_masuk, tgl_keluar, pegawai_keluar, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM products_history
WHERE guid = $1
`

func (q *Queries) FindWithGUIDProductsHistory(ctx context.Context, guid string) ([]ProductsHistory, error) {
	rows, err := q.db.QueryContext(ctx, findWithGUIDProductsHistory, guid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductsHistory
	for rows.Next() {
		var i ProductsHistory
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.ProductGuid,
			&i.Quantity,
			&i.WarehouseGuid,
			&i.TglMasuk,
			&i.PegawaiMasuk,
			&i.TglKeluar,
			&i.PegawaiKeluar,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertKeluarProductsHistory = `-- name: InsertKeluarProductsHistory :one
INSERT INTO products_history
        (tgl_keluar, pegawai_keluar, updated_at, updated_by)
    VALUES
        ((now() at time zone 'UTC')::TIMESTAMP, $1, (now() at time zone 'UTC')::TIMESTAMP, $2)
RETURNING products_history.id, products_history.guid, products_history.product_guid, products_history.quantity, products_history.warehouse_guid, products_history.tgl_masuk, products_history.pegawai_masuk, products_history.tgl_keluar, products_history.pegawai_keluar, products_history.created_at, products_history.created_by, products_history.updated_at, products_history.updated_by, products_history.deleted_at, products_history.deleted_by
`

type InsertKeluarProductsHistoryParams struct {
	PegawaiKeluar string         `json:"pegawai_keluar"`
	UpdatedBy     sql.NullString `json:"updated_by"`
}

func (q *Queries) InsertKeluarProductsHistory(ctx context.Context, arg InsertKeluarProductsHistoryParams) (ProductsHistory, error) {
	row := q.db.QueryRowContext(ctx, insertKeluarProductsHistory, arg.PegawaiKeluar, arg.UpdatedBy)
	var i ProductsHistory
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.ProductGuid,
		&i.Quantity,
		&i.WarehouseGuid,
		&i.TglMasuk,
		&i.PegawaiMasuk,
		&i.TglKeluar,
		&i.PegawaiKeluar,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const insertProductsHistory = `-- name: InsertProductsHistory :one
INSERT INTO products_history
(guid, product_guid, quantity, warehouse_guid, tgl_masuk, pegawai_masuk, created_at, created_by)
VALUES
    ($1, $2, $3, $4, (now() at time zone 'UTC')::TIMESTAMP, $5, (now() at time zone 'UTC')::TIMESTAMP, $6)
RETURNING products_history.id, products_history.guid, products_history.product_guid, products_history.quantity, products_history.warehouse_guid, products_history.tgl_masuk, products_history.pegawai_masuk, products_history.tgl_keluar, products_history.pegawai_keluar, products_history.created_at, products_history.created_by, products_history.updated_at, products_history.updated_by, products_history.deleted_at, products_history.deleted_by
`

type InsertProductsHistoryParams struct {
	Guid          string `json:"guid"`
	ProductGuid   string `json:"product_guid"`
	Quantity      int64  `json:"quantity"`
	WarehouseGuid string `json:"warehouse_guid"`
	PegawaiMasuk  string `json:"pegawai_masuk"`
	CreatedBy     string `json:"created_by"`
}

func (q *Queries) InsertProductsHistory(ctx context.Context, arg InsertProductsHistoryParams) (ProductsHistory, error) {
	row := q.db.QueryRowContext(ctx, insertProductsHistory,
		arg.Guid,
		arg.ProductGuid,
		arg.Quantity,
		arg.WarehouseGuid,
		arg.PegawaiMasuk,
		arg.CreatedBy,
	)
	var i ProductsHistory
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.ProductGuid,
		&i.Quantity,
		&i.WarehouseGuid,
		&i.TglMasuk,
		&i.PegawaiMasuk,
		&i.TglKeluar,
		&i.PegawaiKeluar,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listWithFilterProductHistory = `-- name: ListWithFilterProductHistory :many
SELECT id, guid, product_guid, quantity, warehouse_guid, tgl_masuk, pegawai_masuk, tgl_keluar, pegawai_keluar, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
FROM products_history
WHERE
    (CASE WHEN $1::bool THEN LOWER(pegawai_masuk) LIKE LOWER($2) ELSE TRUE END)
    AND(CASE WHEN $3::bool THEN LOWER(pegawai_keluar) LIKE LOWER($4) ELSE TRUE END)
    AND deleted_at IS NULL
ORDER BY (CASE WHEN $5 = 'id ASC' THEN guid END) ASC,
         (CASE WHEN $5 = 'id DESC' THEN guid END) DESC,
         (CASE WHEN $5 = 'product id ASC' THEN product_guid END) ASC,
         (CASE WHEN $5 = 'product id DESC' THEN product_guid END) DESC,
         (CASE WHEN $5 = 'quantity ASC' THEN quantity END) ASC,
         (CASE WHEN $5 = 'quantity DESC' THEN quantity END) DESC,
         (CASE WHEN $5 = 'warehouse id ASC' THEN warehouse_guid END) ASC,
         (CASE WHEN $5 = 'warehouse id DESC' THEN warehouse_guid END) DESC,
         (CASE WHEN $5 = 'tanggal masuk ASC' THEN tgl_masuk END) ASC,
         (CASE WHEN $5 = 'tanggal masuk DESC' THEN tgl_masuk END) DESC,
         (CASE WHEN $5 = 'pegawai masuk DESC' THEN pegawai_masuk END) DESC,
         (CASE WHEN $5 = 'pegawai masuk ASC' THEN pegawai_masuk END) ASC,
         (CASE WHEN $5 = 'tanggal keluar ASC' THEN tgl_keluar END) ASC,
         (CASE WHEN $5 = 'tanggal keluar DESC' THEN tgl_keluar END) DESC,
         (CASE WHEN $5 = 'pegawai keluar DESC' THEN pegawai_keluar END) DESC,
         (CASE WHEN $5 = 'pegawai keluar ASC' THEN pegawai_keluar END) ASC,
         (CASE WHEN $5 = 'created_at ASC' THEN created_at END) ASC,
         (CASE WHEN $5 = 'created_at DESC' THEN created_at END) DESC,
         products_history.created_at DESC
LIMIT $7
OFFSET $6
`

type ListWithFilterProductHistoryParams struct {
	SetPegawaiMasuk  bool        `json:"set_pegawai_masuk"`
	PegawaiMasuk     string      `json:"pegawai_masuk"`
	SetPegawaiKeluar bool        `json:"set_pegawai_keluar"`
	PegawaiKeluar    string      `json:"pegawai_keluar"`
	OrderParam       interface{} `json:"order_param"`
	OffsetPage       int32       `json:"offset_page"`
	LimitData        int32       `json:"limit_data"`
}

func (q *Queries) ListWithFilterProductHistory(ctx context.Context, arg ListWithFilterProductHistoryParams) ([]ProductsHistory, error) {
	rows, err := q.db.QueryContext(ctx, listWithFilterProductHistory,
		arg.SetPegawaiMasuk,
		arg.PegawaiMasuk,
		arg.SetPegawaiKeluar,
		arg.PegawaiKeluar,
		arg.OrderParam,
		arg.OffsetPage,
		arg.LimitData,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductsHistory
	for rows.Next() {
		var i ProductsHistory
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.ProductGuid,
			&i.Quantity,
			&i.WarehouseGuid,
			&i.TglMasuk,
			&i.PegawaiMasuk,
			&i.TglKeluar,
			&i.PegawaiKeluar,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
