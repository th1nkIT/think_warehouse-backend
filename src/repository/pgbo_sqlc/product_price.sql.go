// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product_price.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteProductPrice = `-- name: DeleteProductPrice :exec
UPDATE product_price pp
SET
    deleted_at = (now() at time zone 'UTC')::TIMESTAMP,
    deleted_by = $1
WHERE
    (CASE WHEN $2::bool THEN pp.product_id = $3 ELSE TRUE END)
  AND (CASE WHEN $4::bool THEN pp.product_variant_id = $5 ELSE TRUE END)
`

type DeleteProductPriceParams struct {
	DeletedBy           sql.NullString `json:"deleted_by"`
	SetProductID        bool           `json:"set_product_id"`
	ProductID           sql.NullString `json:"product_id"`
	SetProductVariantID bool           `json:"set_product_variant_id"`
	ProductVariantID    sql.NullString `json:"product_variant_id"`
}

func (q *Queries) DeleteProductPrice(ctx context.Context, arg DeleteProductPriceParams) error {
	_, err := q.db.ExecContext(ctx, deleteProductPrice,
		arg.DeletedBy,
		arg.SetProductID,
		arg.ProductID,
		arg.SetProductVariantID,
		arg.ProductVariantID,
	)
	return err
}

const getProductPrice = `-- name: GetProductPrice :one
SELECT
    pp.id, pp.guid, pp.product_id, pp.product_variant_id, pp.price, pp.discount_type, pp.discount, pp.is_active, pp.is_active_by, pp.created_at, pp.created_by, pp.updated_at, pp.updated_by, pp.deleted_at, pp.deleted_by
FROM
    product_price pp
WHERE
    (CASE WHEN $1::bool THEN pp.product_id = $2 ELSE TRUE END)
  AND (CASE WHEN $3::bool THEN pp.product_variant_id = $4 ELSE TRUE END)
  AND pp.is_active IS TRUE
ORDER BY pp.created_at DESC
`

type GetProductPriceParams struct {
	SetProductID        bool           `json:"set_product_id"`
	ProductID           sql.NullString `json:"product_id"`
	SetProductVariantID bool           `json:"set_product_variant_id"`
	ProductVariantID    sql.NullString `json:"product_variant_id"`
}

func (q *Queries) GetProductPrice(ctx context.Context, arg GetProductPriceParams) (ProductPrice, error) {
	row := q.db.QueryRowContext(ctx, getProductPrice,
		arg.SetProductID,
		arg.ProductID,
		arg.SetProductVariantID,
		arg.ProductVariantID,
	)
	var i ProductPrice
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.ProductID,
		&i.ProductVariantID,
		&i.Price,
		&i.DiscountType,
		&i.Discount,
		&i.IsActive,
		&i.IsActiveBy,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const insertProductPrice = `-- name: InsertProductPrice :one
INSERT INTO product_price
(guid, product_id, product_variant_id, price,
 discount_type, discount,
 is_active, created_at, created_by)
VALUES
    ($1, $2, $3, $4,
     $5::discount_type_enum, $6,
     $7, (now() at time zone 'UTC')::TIMESTAMP, $8)
    RETURNING product_price.id, product_price.guid, product_price.product_id, product_price.product_variant_id, product_price.price, product_price.discount_type, product_price.discount, product_price.is_active, product_price.is_active_by, product_price.created_at, product_price.created_by, product_price.updated_at, product_price.updated_by, product_price.deleted_at, product_price.deleted_by
`

type InsertProductPriceParams struct {
	Guid             string           `json:"guid"`
	ProductID        sql.NullString   `json:"product_id"`
	ProductVariantID sql.NullString   `json:"product_variant_id"`
	Price            int64            `json:"price"`
	DiscountType     DiscountTypeEnum `json:"discount_type"`
	Discount         sql.NullInt64    `json:"discount"`
	IsActive         bool             `json:"is_active"`
	CreatedBy        string           `json:"created_by"`
}

func (q *Queries) InsertProductPrice(ctx context.Context, arg InsertProductPriceParams) (ProductPrice, error) {
	row := q.db.QueryRowContext(ctx, insertProductPrice,
		arg.Guid,
		arg.ProductID,
		arg.ProductVariantID,
		arg.Price,
		arg.DiscountType,
		arg.Discount,
		arg.IsActive,
		arg.CreatedBy,
	)
	var i ProductPrice
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.ProductID,
		&i.ProductVariantID,
		&i.Price,
		&i.DiscountType,
		&i.Discount,
		&i.IsActive,
		&i.IsActiveBy,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const updateProductPrice = `-- name: UpdateProductPrice :one
UPDATE product_price
SET
    price = $1,
    discount_type = $2::discount_type_enum,
    discount = $3,
    updated_at = (now() at time zone 'UTC')::TIMESTAMP,
    updated_by = $4
WHERE
    (CASE WHEN $5::bool THEN product_id = $6 ELSE TRUE END)
  AND (CASE WHEN $7::bool THEN product_variant_id = $8 ELSE TRUE END)
  AND deleted_at IS NULL
    RETURNING product_price.id, product_price.guid, product_price.product_id, product_price.product_variant_id, product_price.price, product_price.discount_type, product_price.discount, product_price.is_active, product_price.is_active_by, product_price.created_at, product_price.created_by, product_price.updated_at, product_price.updated_by, product_price.deleted_at, product_price.deleted_by
`

type UpdateProductPriceParams struct {
	Price               int64            `json:"price"`
	DiscountType        DiscountTypeEnum `json:"discount_type"`
	Discount            sql.NullInt64    `json:"discount"`
	UpdatedBy           sql.NullString   `json:"updated_by"`
	SetProductID        bool             `json:"set_product_id"`
	ProductID           sql.NullString   `json:"product_id"`
	SetProductVariantID bool             `json:"set_product_variant_id"`
	ProductVariantID    sql.NullString   `json:"product_variant_id"`
}

func (q *Queries) UpdateProductPrice(ctx context.Context, arg UpdateProductPriceParams) (ProductPrice, error) {
	row := q.db.QueryRowContext(ctx, updateProductPrice,
		arg.Price,
		arg.DiscountType,
		arg.Discount,
		arg.UpdatedBy,
		arg.SetProductID,
		arg.ProductID,
		arg.SetProductVariantID,
		arg.ProductVariantID,
	)
	var i ProductPrice
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.ProductID,
		&i.ProductVariantID,
		&i.Price,
		&i.DiscountType,
		&i.Discount,
		&i.IsActive,
		&i.IsActiveBy,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const updateProductPriceIsActive = `-- name: UpdateProductPriceIsActive :exec
UPDATE product_price
SET
    is_active = $1
WHERE
    (CASE WHEN $2::bool THEN product_id = $3 ELSE TRUE END)
  AND (CASE WHEN $4::bool THEN product_variant_id = $5 ELSE TRUE END)
  AND deleted_at IS NULL
`

type UpdateProductPriceIsActiveParams struct {
	IsActive            bool           `json:"is_active"`
	SetProductID        bool           `json:"set_product_id"`
	ProductID           sql.NullString `json:"product_id"`
	SetProductVariantID bool           `json:"set_product_variant_id"`
	ProductVariantID    sql.NullString `json:"product_variant_id"`
}

func (q *Queries) UpdateProductPriceIsActive(ctx context.Context, arg UpdateProductPriceIsActiveParams) error {
	_, err := q.db.ExecContext(ctx, updateProductPriceIsActive,
		arg.IsActive,
		arg.SetProductID,
		arg.ProductID,
		arg.SetProductVariantID,
		arg.ProductVariantID,
	)
	return err
}
