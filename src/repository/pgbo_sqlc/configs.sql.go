// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: configs.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getConfig = `-- name: GetConfig :one
SELECT id, key, description, value, created_at, updated_at, updated_by
    FROM configs
WHERE key = $1
`

func (q *Queries) GetConfig(ctx context.Context, key string) (Config, error) {
	row := q.db.QueryRowContext(ctx, getConfig, key)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Description,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listConfig = `-- name: ListConfig :many
SELECT id, key, description, value, created_at, updated_at, updated_by
    FROM configs
ORDER BY id ASC
`

func (q *Queries) ListConfig(ctx context.Context) ([]Config, error) {
	rows, err := q.db.QueryContext(ctx, listConfig)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Config
	for rows.Next() {
		var i Config
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Description,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setConfig = `-- name: SetConfig :one
INSERT INTO configs(
	key, description, value, created_at)
	VALUES ($1, $2, $3, (now() at time zone 'UTC')::TIMESTAMP)
    ON CONFLICT ON CONSTRAINT key_config
    DO UPDATE SET description = $2, value = $3, created_at = (now() at time zone 'UTC')::TIMESTAMP
RETURNING configs.id, configs.key, configs.description, configs.value, configs.created_at, configs.updated_at, configs.updated_by
`

type SetConfigParams struct {
	Key         string         `json:"key"`
	Description sql.NullString `json:"description"`
	Value       string         `json:"value"`
}

func (q *Queries) SetConfig(ctx context.Context, arg SetConfigParams) (Config, error) {
	row := q.db.QueryRowContext(ctx, setConfig, arg.Key, arg.Description, arg.Value)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Description,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const updateConfig = `-- name: UpdateConfig :one
UPDATE configs
	SET description = $1,
        value = $2,
        updated_at = (now() at time zone 'UTC')::TIMESTAMP, 
        updated_by = $3
	WHERE id = $4
RETURNING configs.id, configs.key, configs.description, configs.value, configs.created_at, configs.updated_at, configs.updated_by
`

type UpdateConfigParams struct {
	Description sql.NullString `json:"description"`
	Value       string         `json:"value"`
	UpdatedBy   sql.NullString `json:"updated_by"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateConfig(ctx context.Context, arg UpdateConfigParams) (Config, error) {
	row := q.db.QueryRowContext(ctx, updateConfig,
		arg.Description,
		arg.Value,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Description,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
